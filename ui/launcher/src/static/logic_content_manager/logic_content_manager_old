#pragma once
#include "../../../../../main/include/modules/delete.h"
#include "../../../../../main/include/modules/install.h"
#include "../../../../../main/include/modules/load.h"
#include "../../../../../main/include/vortex.h"
#include "../../../../../main/include/vortex_internals.h"
#include "../../instances/file_browser/file_browser.hpp"

#ifndef LOGICCONTENTMANAGER_H
#define LOGICCONTENTMANAGER_H

namespace VortexLauncher {

  struct LogicContentManagerChild {
    std::function<void()> RenderCallback;
    std::string LogoPath;
    LogicContentManagerChild(
        const std::function<void()> &rendercallback = []() { },
        const std::string &logopath = "undefined")
        : RenderCallback(rendercallback),
          LogoPath(logopath) { };
  };

  class LogicContentManager : public std::enable_shared_from_this<LogicContentManager> {
   public:
    LogicContentManager(const std::string &name);

    void AddChild(const std::string &child_name, const LogicContentManagerChild &child);
    void RemoveChild(const std::string &child_name);
    LogicContentManagerChild *GetChild(const std::string &child_name);

    void RefreshVersionsToRender();
    void RenderImportModules();

    std::shared_ptr<Cherry::AppWindow> &GetAppWindow();
    static std::shared_ptr<LogicContentManager> Create(const std::string &name);
    void SetupRenderCallback();
    void Render();
    void SearchModulesOnDirectory(const std::string &path);
    bool MyButton(
        const std::string &name,
        const std::string &path,
        const std::string &description,
        const std::string &size,
        bool selected,
        const std::string &logo,
        ImU32 bgColor,
        ImU32 borderColor,
        ImU32 lineColor,
        float maxTextWidth,
        float borderRadius);

    std::unordered_map<std::string, LogicContentManagerChild> m_Childs;
    std::string m_SelectedChildName;
    std::shared_ptr<FileBrowserAppWindow> m_FileBrowser;
    std::shared_ptr<Cherry::AppWindow> m_AppWindow;

    std::vector<std::shared_ptr<ModuleInterface>> m_FindedModules;
    std::vector<std::shared_ptr<ModuleInterface>> m_SelectedModules;
    std::vector<std::shared_ptr<ModuleInterface>> m_ModulesToSuppr;
    std::vector<std::shared_ptr<ModuleInterface>> m_ModulesToImport;
    std::atomic<bool> m_StillSearching = false;
    bool m_SearchStarted = false;
    std::string m_SearchElapsedTime;

    bool m_ShowModulesDeletionModal = false;
    bool m_ShowModulesImportModal = false;
    bool m_ShowPluginsDeletionModal = false;
    bool m_ShowPluginsImportModal = false;
    std::vector<int> m_SelectedIds;
    std::mutex m_ModulesMutex;
    int m_ToImportDestinationIndex;
    std::vector<std::string> m_ModulesPool;
    std::string m_ToImportDestination;
    char ContentPath[512] = "";

    std::vector<std::string> m_FilterPlatforms = { "All platforms", "Linux", "Windows" };
    std::vector<std::string> m_FilterVersions = { "All versions" };
    ;
    std::string m_SelectedVersion = "All versions";
    std::string m_SelectedPlatform = "All platforms";
    char ModulesSearch[512];
    std::vector<std::string> m_TemplatesPool;
    float leftPaneWidth = 300.0f;
    int selected;
  };

}  // namespace VortexLauncher

#endif  // LOGICCONTENTMANAGER_H